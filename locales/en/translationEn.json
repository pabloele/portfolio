{
    "<About/>":"<About/>",
    "description": "Welcome! I am a full-stack web developer. Currently, I am focused on building responsive applications that solve real-world problems. I am passionate about integrating new technologies into my projects (you'll break it until you make it ðŸ˜Š). On this page, you can browse through some of my work. Do you like what you see?",
    "Conecta":"Connect",
    "Skills":"Skills",
    "Proyectos":"Projects",
    "Contacto": "Contact me",
    "Inicio":"Home",
    "About":"About",
    "Mis redes":"My networks",
    "<Skills />":"<Skills />",
    "Nombre":"Name",
    "TelÃ©fono (opcional)":"Phone (optional)",
    "Enviar Mensaje":"Send Message",
    "Mensaje":"Message",
    "<Proyectos />":"<Projects />",
    "Subject":"Subject",
    "<Contacto />":"<Contact me />",
    "Hola! Soy":"Hi! i'm",
    "Soy un desarrollador web full stack":"I'm a Fullstack Web Developer",
    "Este es mi Portfolio":"This is my portfolio",
    "mecanuDescription": "Internship working on the web app for this innovative Chilean startup that provides home mechanic services. The application allows users to register, select services for their vehicles, and receive an instant quote. As a 'full-stack' developer, I played a dynamic role, participating in both the front-end and back-end, using agile methodologies and technologies such as Next.js, Tailwind, Express, Postgresql, Sequelize, Firebase, Mercado Pago, and Sendgrid. I also implemented the Progressive Web App (PWA) functionality.",
    "Tecnologias": "Technologies",
    "netflixDescription": "Frontend work imitating the well-known streaming service. It allows viewing movie cards from the IMDB API, enabling users to create profiles and save their favorite movies. FIREBASE was used to provide authentication while FIRESTORE was utilized as the database.",
    "Overview": "Overview",
    "pokemonDescription": "Application developed as an individual project during the Henry bootcamp. The app allows users to view PokÃ©mon cards obtained from an external API. Pagination, sorting, combined filters, and full CRUD functionality were implemented. The backend was built using Node.js and Express, with PostgreSQL and Sequelize as the database and ORM."
}